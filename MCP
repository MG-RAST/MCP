#!/soft/packages/python/2.6/bin/python

import argparse
import os
import json
import sys
import re
import syslog
import getpass

# Getting path to MCP
MCP_path = os.path.realpath(__file__)
matchObj = re.match(r'(^.*\/)', MCP_path)
MCP_dir = matchObj.group(0)

user = getpass.getuser()
syslog.openlog("[MCP] [INFO] [" + user + "] [" + MCP_path + "] ", syslog.LOG_PID, syslog.LOG_LOCAL1)

# Adding modules directory to path
path = list(sys.path)
sys.path.insert(0, MCP_dir+"mcp_modules/")

if 'MCP_CONF' not in os.environ.keys() or os.environ['MCP_CONF'] == '':
    sys.stderr.write("ERROR: please set MCP_CONF environment variable to the location of the MCP configuration file.\n")
    sys.exit()
    
json_conf_file_path = os.environ['MCP_CONF']
json_conf_file = open(json_conf_file_path)
json_conf = json.load(json_conf_file)

def main():
    parser = argparse.ArgumentParser(description='MG-RAST Control Program (MCP)')
    parser.add_argument('subsystem', metavar='subsystem',
                   help="An MG-RAST subsystem. The current list of subsystems includes: '" + 
                   "', '".join(json_conf["global"]["subsystems"])+"'")
    parser.add_argument('params', metavar='params', nargs=argparse.REMAINDER,
                   help='Additional arguments should specify a function followed by function parameters.')
    args = parser.parse_args()
    subsystem = args.subsystem
    params = args.params

    if subsystem in json_conf["global"]["subsystems"]:
        # Retrieve the appropriate "subsystem" python module and class (module and class names should be identical)
        module = __import__(subsystem)
        myclass = getattr(module, subsystem)
        # Create the python class instance dynamically
        mysubsystem = myclass(MCP_dir, json_conf_file_path)
        function, function_params = mysubsystem.parse_subsystem_params(params)
        myfunction = getattr(mysubsystem, function)
        if(len(params) == 1):
            msg = "Calling the subsystem: " + subsystem + " with the function: " + function
        else:
            msg = "Calling the subsystem: " + subsystem + " with the function: " + function + " and the parameters: " + ", ".join(params[1:])
        syslog.syslog(syslog.LOG_INFO, msg)
        myfunction(function_params)

    syslog.closelog()
    return 0

if __name__ == "__main__":
    sys.exit( main() )
